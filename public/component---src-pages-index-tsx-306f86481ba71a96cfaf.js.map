{"version":3,"file":"component---src-pages-index-tsx-306f86481ba71a96cfaf.js","mappings":"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","sources":["webpack://parallax-landing/./src/components/ScrollJack/ScrollJackWrapper.tsx","webpack://parallax-landing/./src/pages/index.tsx"],"sourcesContent":["import React, { isValidElement, ReactElement, ReactNode, useCallback, useEffect, useRef } from 'react';\nimport { AnimatePresence } from 'framer-motion';\nimport { navigate } from 'gatsby';\nimport { useLocation } from '@reach/router';\n\nimport { useMedia } from '@shared/hocs/withMedia';\n\nimport { useScrollJack } from './withScrollJack';\n\ntype ScrollJackWrapperProps = {\n  children: ReactNode\n}\n\nconst ScrollJackWrapper = ({ children }: ScrollJackWrapperProps) => {\n  const sections: ReactElement[] = React.Children.toArray(children).filter(isValidElement);\n\n  const firstMount = useRef<boolean>(true);\n  const touchStart = useRef<{ clientX: number, clientY: number }>();\n  const canScroll = useRef(true);\n  const scrollTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const lastScrollWheelTimestamp = useRef<number>(0);\n  const lastScrollWheelDelta = useRef<number>(0);\n  const minScrollWheelInterval = useRef<number>(200);\n  const canMoveNext = useRef(true);\n  const canMovePrev = useRef(false);\n  const maxSections = useRef(sections.length);\n  \n  const location = useLocation();\n  const { isMobile } = useMedia();\n  const {\n    currentSectionId,\n    currentSectionIndex,\n    setCurrentSectionId,\n    setCurrentSectionIndex\n  } = useScrollJack();\n\n  useEffect(() => {\n    canMoveNext.current = currentSectionIndex < maxSections.current - 1;\n    canMovePrev.current = currentSectionIndex > 0;\n\n    const nextId = sections[currentSectionIndex]?.props.id;\n\n    setCurrentSectionId(nextId);\n  }, [ currentSectionIndex, isMobile ]);\n\n  useEffect(() => {\n    return () => {\n      if (scrollTimeout.current) {\n        clearTimeout(scrollTimeout.current);\n      }\n    };\n  }, []);\n  \n  const moveNext = useCallback(() => {\n    if (!canMoveNext.current) return;\n\n    const nextIndex = currentSectionIndex + 1;\n    \n    setCurrentSectionIndex(nextIndex);\n  }, [ currentSectionIndex ]);\n\n  const movePrev = useCallback(() => {\n    if (!canMovePrev.current) return;\n\n    const nextIndex = currentSectionIndex - 1;\n\n    setCurrentSectionIndex(nextIndex);\n  }, [ currentSectionIndex ]);\n\n  const moveTo = useCallback((nextIndex: number) => {\n    setCurrentSectionIndex(Math.max(0, Math.min(nextIndex, maxSections.current)));\n  }, []);\n\n  useEffect(() => {\n    const handleScroll = (e: WheelEvent) => {\n      const now = Date.now();\n\n      const rapidSuccession = now - lastScrollWheelTimestamp.current < minScrollWheelInterval.current;\n      const otherDirection = (lastScrollWheelDelta.current > 0) !== (e.deltaY > 0);\n      const speedDecrease = Math.abs(e.deltaY) < Math.abs(lastScrollWheelDelta.current);\n\n      const isHuman = otherDirection || !rapidSuccession || !speedDecrease;\n\n      if (!isHuman || !canScroll.current) return;\n\n      canScroll.current = false;\n      lastScrollWheelTimestamp.current = now;\n      lastScrollWheelDelta.current = e.deltaY;\n\n      scrollTimeout.current = setTimeout(() => {\n        canScroll.current = true;\n      }, 2000);\n\n      if (e.deltaY >= 1) {\n        moveNext();\n      } else {\n        movePrev();\n      }\n    };\n\n    const handleTouchStart = (e: TouchEvent) => {\n      touchStart.current = e.changedTouches[0];\n    };\n\n    const handleTouchEnd = (e: TouchEvent) => {\n      if (!touchStart.current || !canScroll.current) return;\n\n      canScroll.current = false;\n\n      scrollTimeout.current = setTimeout(() => {\n        canScroll.current = true;\n      }, 2000);\n\n      const touchEnd = e.changedTouches[0];\n\n      const deltaY = touchStart.current.clientY - touchEnd.clientY;\n      const deltaX = touchStart.current.clientX - touchEnd.clientX;\n\n      if (Math.abs(deltaY) < Math.abs(deltaX)) return;\n\n      if (deltaY > 30) {\n        moveNext();\n      } else if (deltaY < -30) {\n        movePrev();\n      }\n    };\n\n    window.addEventListener('wheel', handleScroll);\n    window.addEventListener('touchstart', handleTouchStart);\n    window.addEventListener('touchend', handleTouchEnd);\n\n    return () => {\n      window.removeEventListener('wheel', handleScroll);\n      window.removeEventListener('touchstart', handleTouchStart);\n      window.removeEventListener('touchend', handleTouchEnd);\n    };\n  }, [ moveNext, movePrev ]);\n\n  useEffect(() => {\n    const id = location.hash.slice(1);\n\n    const sectionIndex = sections.findIndex((section) => section.props.id === id);\n\n    if (sectionIndex > 0) {\n      moveTo(sectionIndex);\n\n      return;\n    }\n\n    if (!location.hash) {\n      moveTo(0);\n    }\n  }, [ location.hash ]);\n\n  useEffect(() => {\n    navigate(`#${currentSectionId}`, { replace: firstMount.current }); \n\n    if (firstMount.current) {\n      firstMount.current = false;\n    }\n  }, [ currentSectionId ]);\n  \n  return (\n    <AnimatePresence exitBeforeEnter>\n      { sections[currentSectionIndex] }\n    </AnimatePresence>\n  );\n};\n\nexport default ScrollJackWrapper;","import React from 'react';\n\nimport ContactsSection from '@modules/ContactsSection';\nimport ContactsMobile from '@modules/ContactsSection/ContactsMobile';\nimport FaqSection from '@modules/FaqSection';\nimport FaqMobile from '@modules/FaqSection/FaqMobile';\nimport FirstFeature from '@modules/FirstFeature';\nimport FourthFeature from '@modules/FourthFeature';\nimport GallerySection from '@modules/GallerySection';\nimport MainScreen from '@modules/MainScreen';\nimport RoadmapSection from '@modules/RoadmapSection';\nimport RoadmapMobile from '@modules/RoadmapSection/RoadmapMobile';\nimport SecondFeature from '@modules/SecondFeature';\nimport TeamSection from '@modules/TeamSection';\nimport ThirdFeature from '@modules/ThirdFeature';\nimport TrailerSection from '@modules/TrailerSection';\n\nimport { ScrollJackWrapper } from '@components/ScrollJack';\n\nimport { FAQ_QUESTIONS } from '@shared/constants';\nimport { useMedia } from '@shared/hocs/withMedia';\n\nconst IndexPage = () => {\n  const { isMobile } = useMedia();\n \n  return (\n    <ScrollJackWrapper>\n      <MainScreen id=\"main\" />\n      <TrailerSection id=\"trailer\" />\n      <FirstFeature id=\"feature-1\" />\n      <SecondFeature id=\"feature-2\" />\n      <ThirdFeature id=\"feature-3\" />\n      <FourthFeature id=\"feature-4\" />\n      <RoadmapSection id=\"roadmap\" />\n      { isMobile && <RoadmapMobile id=\"roadmap-mobile\" /> }\n      <GallerySection id=\"founders-nft\" />\n      <TeamSection id=\"team\" />\n      <FaqSection id=\"faq\" questions={ FAQ_QUESTIONS } />\n      { isMobile && <FaqMobile id=\"faq-mobile\" questions={ FAQ_QUESTIONS } /> }\n      <ContactsSection id=\"contacts\" />\n      { isMobile && <ContactsMobile id=\"contacts-mobile\" /> }\n    </ScrollJackWrapper>\n  );\n};\n\nexport default IndexPage;\n"],"names":["children","sections","React","filter","isValidElement","firstMount","useRef","touchStart","canScroll","scrollTimeout","lastScrollWheelTimestamp","lastScrollWheelDelta","minScrollWheelInterval","canMoveNext","canMovePrev","maxSections","length","location","useLocation","isMobile","useMedia","useScrollJack","currentSectionId","currentSectionIndex","setCurrentSectionId","setCurrentSectionIndex","useEffect","current","nextId","props","id","clearTimeout","moveNext","useCallback","movePrev","moveTo","nextIndex","Math","max","min","handleScroll","e","now","Date","rapidSuccession","otherDirection","deltaY","speedDecrease","abs","setTimeout","handleTouchStart","changedTouches","handleTouchEnd","touchEnd","clientY","deltaX","clientX","window","addEventListener","removeEventListener","hash","slice","sectionIndex","findIndex","section","navigate","replace","AnimatePresence","exitBeforeEnter","questions","FAQ_QUESTIONS"],"sourceRoot":""}